<?xml version="1.0" encoding="UTF-8"?>
<project name="Complexity" basedir="." default="all">
   <!-- import antlr-contrib -->
   <taskdef resource="net/sf/antcontrib/antlib.xml">
      <classpath>
         <pathelement location="ant-contrib/ant-contrib-dev.jar"/>
      </classpath>
   </taskdef>

   <!-- logicblox stuff -->
   <property environment="env"/>
   <property name="lbhome" value="${env.LB_HOME}"/>
   <property name="predicateInfo.file" value="bin/batfish/logic/predicateInfo.object"/>

   <!-- import and configure one-jar -->
   <property name="one-jar.dir" location="one-jar"/>
   <import file="${one-jar.dir}/build.onejar.xml"/>
	<property name="eclipse.jar-in-jar.dir" value="build-lib/eclipse"/>
	<property name="temp.dir" value="temp" />	
   <path id="libraries">
      <fileset dir="lib" includes="**/*.jar"/>
   </path>
   <property name="outputJar" value="out/batfish.jar"/>
   <property name="lbSummary" value="bin/batfish/logic/LB_SUMMARY.lbp"/>

   <!-- antlr build macro -->
   <macrodef name="antlr3">
      <attribute name="grammar.packagedir"/>
      <attribute name="grammar.name"/>
      <attribute name="antlrjar" default="lib/antlr/antlr-3.4-complete.jar"/>
      <sequential>
         <java fork="true" failonerror="true" jar="@{antlrjar}">
            <arg value="-o"/>
            <arg path="src/@{grammar.packagedir}"/>
            <arg value="-verbose"/>
            <arg value="-Xmultithreaded"/>
            <arg value="-make"/>
            <arg path="src/@{grammar.packagedir}/@{grammar.name}"/>
         </java>
      </sequential>
   </macrodef> 

   <!-- antlr4 build macro for lexers -->
   <macrodef name="antlr4lexer">
      <attribute name="grammar.packagedir"/>
      <attribute name="grammar.name"/>
      <attribute name="antlrjar" default="lib/antlr/antlr-4.4-complete.jar"/>
      <sequential>
         <outofdate>
            <sourcefiles>
               <fileset dir="src/@{grammar.packagedir}" includes="@{grammar.name}.g4"/>
            </sourcefiles>
            <targetfiles>
               <fileset dir="src/@{grammar.packagedir}" includes="@{grammar.name}.java"/>
               <fileset dir="src/@{grammar.packagedir}" includes="@{grammar.name}.tokens"/>
            </targetfiles>
            <sequential>
               <java fork="true" failonerror="true" jar="@{antlrjar}">
                  <arg path="src/@{grammar.packagedir}/@{grammar.name}.g4"/>
                  <arg value="-o"/>
                  <arg path="src/@{grammar.packagedir}"/>
                  <arg value="-encoding"/>
                  <arg value="UTF-8"/>
                  <arg value="-Werror"/>
               </java>
            </sequential>
         </outofdate>
      </sequential>
   </macrodef> 

   <!-- antlr4 build macro for parsers -->
   <macrodef name="antlr4parser">
      <attribute name="grammar.packagedir"/>
      <attribute name="grammar.name"/>
      <attribute name="antlrjar" default="lib/antlr/antlr-4.4-complete.jar"/>
      <element name="dependencies"/>
      <sequential>
         <outofdate>
            <sourcefiles>
               <dependencies/>
            </sourcefiles>
            <targetfiles>
               <fileset dir="src/@{grammar.packagedir}" includes="@{grammar.name}.java"/>
<!--               <fileset dir="src/@{grammar.packagedir}" includes="@{grammar.name}Listener.java"/>
               <fileset dir="src/@{grammar.packagedir}" includes="@{grammar.name}Visitor.java"/>
               <fileset dir="src/@{grammar.packagedir}" includes="@{grammar.name}BaseListener.java"/>
               <fileset dir="src/@{grammar.packagedir}" includes="@{grammar.name}BaseVisitor.java"/> -->
               <fileset dir="src/@{grammar.packagedir}" includes="@{grammar.name}.tokens"/>
            </targetfiles>
            <sequential>
               <java fork="true" failonerror="true" jar="@{antlrjar}">
                  <arg path="src/@{grammar.packagedir}/@{grammar.name}.g4"/>
                  <arg value="-o"/>
                  <arg path="src/@{grammar.packagedir}"/>
                  <arg value="-no-listener"/>  
                  <arg value="-lib"/>
                  <arg path="src/@{grammar.packagedir}"/>
                  <arg value="-encoding"/>
                  <arg value="UTF-8"/>
                  <redirector>
                     <outputfilterchain>
                           <linecontainsregexp negate="true">
                              <regexp pattern="warning\(109\):"/>
                           </linecontainsregexp>
                     </outputfilterchain>
                  </redirector>
               </java>
            </sequential>
         </outofdate>
      </sequential>
   </macrodef> 

   <target name="all" depends="jar" description="Build everything"/>

	<target name="grammarclean" description="Delete generated antlr files">
      <delete>
         <fileset dir="src" includes="**/*.tokens"/>
         <fileset dir="src" includes="batfish/grammar/arista/AristaGrammar*.java"/>
         <fileset dir="src" includes="batfish/grammar/cisco/CiscoGrammar*.java"/>
         <fileset dir="src" includes="batfish/grammar/flatjuniper/FlatJuniperLexer*.java"/>
         <fileset dir="src" includes="batfish/grammar/flatjuniper/FlatJuniperParser*.java"/>
         <fileset dir="src" includes="batfish/grammar/juniper/JuniperGrammar*.java"/>
         <fileset dir="src" includes="batfish/grammar/juniper/FlatJuniperGrammar*.java"/>
         <fileset dir="src" includes="batfish/grammar/quanta/QuantaGrammar*.java"/>
         <fileset dir="src" includes="batfish/grammar/topology/BatfishTopologyParser*.java"/>
         <fileset dir="src" includes="batfish/grammar/topology/GNS3TopologyParser*.java"/>
         <fileset dir="src" includes="batfish/grammar/topology/BatfishTopologyLexer*.java"/>
         <fileset dir="src" includes="batfish/grammar/topology/GNS3TopologyLexer*.java"/>
         <fileset dir="src" includes="batfish/grammar/z3/Constraints*.java"/>
         <fileset dir="src" includes="batfish/grammar/z3/DatalogQueryResultParser*.java"/>
         <fileset dir="src" includes="batfish/grammar/z3/DatalogQueryResultLexer*.java"/>
         <fileset dir="src" includes="batfish/grammar/z3/ConcretizerQueryResultParser*.java"/>
         <fileset dir="src" includes="batfish/grammar/z3/ConcretizerQueryResultLexer*.java"/>
         <fileset dir="src" includes="batfish/grammar/logicblox/LogiQLParser*.java"/>
         <fileset dir="src" includes="batfish/grammar/logicblox/LogiQLLexer*.java"/>
      </delete>
	</target>

   <!-- Check if we need to compile any antlr grammars -->
   <target name="checkGrammarBuild" depends="deleteMasterTokens">
      <uptodate property="grammarBuild.notRequired">
         <srcfiles dir="src" includes="**/*.g"/>
         <mapper>
            <mapper type="regexp" from="(.*).g" to="\1.tokens"/>
         </mapper>
      </uptodate>
   </target>

   <!-- Check to see if anything that would be packaged for distribution has changed -->
   <target name="checkJarBuild" depends="lbcompile,compile,predicateinfo">
      <uptodate property="jarBuild.notRequired" targetfile="${outputJar}">
         <srcfiles dir="bin" includes="**/*"/>
         <srcfiles dir="lib" includes="**/*"/>
      </uptodate>
   </target>

   <target name="checkLogicBloxCompile" description="checks if we need to compile logicblox project">
      <sequential>
         <uptodate property="lbSummary.upToDate" targetfile="${lbSummary}">
            <srcfiles dir="src" includes="**/*.logic"/>
         </uptodate>
         <uptodate property="lbbFiles.upToDate">
            <srcfiles dir="src" includes="**/*.logic"/>
            <mapper>
               <mapper type="regexp" from="(.*).logic" to="../bin/\1.lbb"/>
            </mapper>
         </uptodate>
         <condition property="lbUnavailable">
            <not>
               <available file="${lbhome}" type="dir"/>
            </not>
         </condition>
         <condition property="lbBuild.notRequired">
            <or>
               <isset property="lbUnavailable"/>
               <and>
                  <isset property="lbSummary.upToDate"/>
                  <isset property="lbbFiles.upToDate"/>
               </and>
            </or>
         </condition>
      </sequential>
   </target>

   <target name="clean" depends="compileclean, grammarclean" description="Delete all intermediate files"/>

   <target name="compile" depends="grammar,grammar4parsers"
    description=
     "Compile all Java files (including those generated by antlr)">
      <mkdir dir="bin"/>
      <javac destdir="bin" includes="**/*.java" debug="true" includeantruntime="false" source="1.7" target="1.7">
      	 <src path="src" />
         <classpath refid="libraries" />
         <classpath refid="one-jar.libraries"/>
         <classpath path="${one-jar.ant.jar}"/>
      </javac>
	</target>

	<target name="compileclean" description="Delete all compiled Java classes and copied logic">
		<delete dir="bin" />
	</target>

   <target name="copylogic" description="Copy logic files from src to bin for staging">
      <copy todir="bin">
         <fileset dir="src" includes="**/*.logic"/>
      </copy>
   </target>

   <!-- Delete .tokens files of master grammars if dependent grammars have changed -->
   <target name="deleteMasterTokens">
      <outofdate>
         <deletetargets/>
         <sourcefiles>
            <fileset dir="src" includes="**/*.g"/>
         </sourcefiles>
         <mapper type="regexp" from="([^_]*)_.*.g" to="\1.tokens"/>
      </outofdate>
   </target>

   <target name="distclean" depends="clean"
    description=
     "Delete everything generated by build process, as well as logic generated by Batfish">
      <delete dir="out"/>
      <delete dir="generated_logic" />
	</target>

   <target name="eclipse_clean" depends="lbclean,grammarclean,predicateinfoclean"
      description="Clean everything generated by eclipse non-java-compiler builders"/>

   <target name="eclipse_post_compile" depends="lbcompile,predicateinfo"
      description="Last stage of eclipse compilation" />

   <target name="grammar" depends="checkGrammarBuild" unless="grammarBuild.notRequired"
     description="Compile antlr grammars">
      <parallel>
         <antlr3 grammar.name="FlatJuniperGrammar.g" grammar.packagedir="batfish/grammar/juniper"/>
         <antlr3 grammar.name="JuniperGrammar.g" grammar.packagedir="batfish/grammar/juniper"/>
      </parallel>
   </target>

   <target name="grammar4lexers"
     description="Compile antlr4 lexer grammars">
      <parallel>
         <antlr4lexer grammar.name="CiscoGrammarCommonLexer" grammar.packagedir="batfish/grammar/cisco"/>
         <antlr4lexer grammar.name="AristaGrammarCommonLexer" grammar.packagedir="batfish/grammar/arista"/>
         <antlr4lexer grammar.name="QuantaGrammarCommonLexer" grammar.packagedir="batfish/grammar/quanta"/>
         <antlr4lexer grammar.name="FlatJuniperLexer" grammar.packagedir="batfish/grammar/flatjuniper"/>
      </parallel>
   </target>

   <target name="grammar4parsers" depends="grammar4lexers"
     description="Compile antlr4 parser grammars">
      <parallel>
         <antlr4parser grammar.name="CiscoGrammar" grammar.packagedir="batfish/grammar/cisco">
            <dependencies>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammar.g4"/>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammarCommonLexer.g4"/>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammarCommonLexer.tokens"/>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammarCommonParser.g4"/>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammar_acl.g4"/>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammar_bgp.g4"/>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammar_interface.g4"/>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammar_ospf.g4"/>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammar_rip.g4"/>
               <fileset dir="src/batfish/grammar/cisco" includes="CiscoGrammar_routemap.g4"/>
            </dependencies>
         </antlr4parser>
         <antlr4parser grammar.name="AristaGrammar" grammar.packagedir="batfish/grammar/arista">
            <dependencies>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammar.g4"/>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammarCommonLexer.g4"/>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammarCommonLexer.tokens"/>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammarCommonParser.g4"/>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammar_acl.g4"/>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammar_bgp.g4"/>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammar_interface.g4"/>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammar_ospf.g4"/>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammar_rip.g4"/>
               <fileset dir="src/batfish/grammar/arista" includes="AristaGrammar_routemap.g4"/>
            </dependencies>
         </antlr4parser>
         <antlr4parser grammar.name="QuantaGrammar" grammar.packagedir="batfish/grammar/quanta">
            <dependencies>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammar.g4"/>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammarCommonLexer.g4"/>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammarCommonLexer.tokens"/>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammarCommonParser.g4"/>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammar_acl.g4"/>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammar_bgp.g4"/>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammar_interface.g4"/>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammar_ospf.g4"/>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammar_rip.g4"/>
               <fileset dir="src/batfish/grammar/quanta" includes="QuantaGrammar_routemap.g4"/>
            </dependencies>
         </antlr4parser>
         <antlr4parser grammar.name="FlatJuniperParser" grammar.packagedir="batfish/grammar/flatjuniper">
            <dependencies>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniperParser.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniperLexer.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniperLexer.tokens"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniper_bgp.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniper_common.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniper_firewall.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniper_interfaces.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniper_isis.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniper_mpls.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniper_ospf.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniper_policy_options.g4"/>
               <fileset dir="src/batfish/grammar/flatjuniper" includes="FlatJuniper_routing_instances.g4"/>
            </dependencies>
         </antlr4parser>
      </parallel>
   </target>

   <target name="jar" depends="checkJarBuild" unless="jarBuild.notRequired"
     description="Produce distribution all-in-one jar">
      <mkdir dir="out"/>
      <one-jar destfile="${outputJar}">
         <manifest>
            <attribute name="Main-Class" value="batfish.main.Boot"/>
            <attribute name="One-Jar-Main-Class" value="batfish.main.Driver"/>
            <attribute name="One-Jar-URL-Factory" value="com.simontuffs.onejar.JarClassLoader$OneJarURLFactory"/>
         </manifest>
         <main>
            <fileset dir="bin"/>
         </main>
         <lib>
            <fileset dir="lib" includes="**/*" />
         </lib>
		</one-jar>
		<delete dir="${temp.dir}" />
	</target>

   <target name="lbclean" description="Clean logic project compiled output">
      <delete>
         <fileset dir="bin" includes="**/*.lbb"/>
         <fileset dir="bin" includes="**/*.lbp"/>
      </delete>
   </target>

   <target name="lbcompile" depends="checkLogicBloxCompile" unless="lbBuild.notRequired" description="Compile logicblox code">
   </target>

   <target name="predicateinfo" depends="compile,lbcompile" description="Extract predicate information from logic files">
      <mkdir dir="bin"/>
      <outofdate>
         <deletetargets/>
         <sourcefiles>
            <fileset dir="src" includes="**/*.logic"/>
            <fileset dir="src" includes="**/*.java"/>
            <fileset dir="src" includes="**/*.g4"/>
         </sourcefiles>
         <targetfiles path="${predicateInfo.file}"/>
         <sequential>
         </sequential>
      </outofdate>
   </target>

   <target name="predicateinfoclean" description="Delete generated predicate info">
      <delete file="${predicateInfo.file}"/>
   </target>

</project>

